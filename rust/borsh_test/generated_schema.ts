import { b } from 'zorsh';

export const AchievementSchema = b.struct({ id: b.vec(b.u8()), name: b.vec(b.u8()), description: b.vec(b.u8()), reward_points: b.u32(), completed_at: b.enum({ None: b.unit(), Some: b.u64() }), prerequisites: b.vec(b.vec(b.u8())) });
export type Achievement = b.infer<typeof AchievementSchema>;

export const CharacterClassMageSchema = b.struct({ base_stats: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }), spells_known: b.vec(b.vec(b.u8())), mana_regen: b.u32() });
export type CharacterClassMage = b.infer<typeof CharacterClassMageSchema>;

export const CharacterClassRogueSchema = b.struct({ base_stats: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }), stealth_level: b.u8(), critical_chance: b.u32() });
export type CharacterClassRogue = b.infer<typeof CharacterClassRogueSchema>;

export const GuildMembershipSchema = b.struct({ guild_id: b.vec(b.u8()), guild_name: b.vec(b.u8()), joined_at: b.u64(), rank: b.vec(b.u8()), permissions: b.vec(b.vec(b.u8())) });
export type GuildMembership = b.infer<typeof GuildMembershipSchema>;

export const ItemSchema = b.struct({ id: b.vec(b.u8()), name: b.vec(b.u8()), description: b.vec(b.u8()), rarity: b.enum({ Common: b.unit(), Uncommon: b.unit(), Rare: b.unit(), Epic: b.unit(), Legendary: b.unit() }), level_requirement: b.u8(), effects: b.vec(b.enum({ Damage: b.tuple([b.u32()]), Heal: b.struct({ amount: b.u32(), duration: b.u16() }), Status: b.struct({ effect_type: b.vec(b.u8()), power: b.u16(), duration: b.u32() }), None: b.unit() })), stats: b.enum({ None: b.unit(), Some: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }) }), metadata: b.vec(b.tuple([b.vec(b.u8()), b.vec(b.u8())])) });
export type Item = b.infer<typeof ItemSchema>;

export const ItemEffectHealSchema = b.struct({ amount: b.u32(), duration: b.u16() });
export type ItemEffectHeal = b.infer<typeof ItemEffectHealSchema>;

export const ItemEffectStatusSchema = b.struct({ effect_type: b.vec(b.u8()), power: b.u16(), duration: b.u32() });
export type ItemEffectStatus = b.infer<typeof ItemEffectStatusSchema>;

export const LocationSchema = b.struct({ lat: b.u64(), lng: b.u64(), altitude: b.enum({ None: b.unit(), Some: b.u32() }) });
export type Location = b.infer<typeof LocationSchema>;

export const PlayerCharacterSchema = b.struct({ id: b.vec(b.u8()), name: b.vec(b.u8()), created_at: b.u64(), last_login: b.u64(), character_class: b.enum({ Warrior: b.tuple([b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() })]), Mage: b.struct({ base_stats: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }), spells_known: b.vec(b.vec(b.u8())), mana_regen: b.u32() }), Rogue: b.struct({ base_stats: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }), stealth_level: b.u8(), critical_chance: b.u32() }) }), level: b.u32(), experience: b.u64(), location: b.struct({ lat: b.u64(), lng: b.u64(), altitude: b.enum({ None: b.unit(), Some: b.u32() }) }), inventory: b.vec(b.struct({ id: b.vec(b.u8()), name: b.vec(b.u8()), description: b.vec(b.u8()), rarity: b.enum({ Common: b.unit(), Uncommon: b.unit(), Rare: b.unit(), Epic: b.unit(), Legendary: b.unit() }), level_requirement: b.u8(), effects: b.vec(b.enum({ Damage: b.tuple([b.u32()]), Heal: b.struct({ amount: b.u32(), duration: b.u16() }), Status: b.struct({ effect_type: b.vec(b.u8()), power: b.u16(), duration: b.u32() }), None: b.unit() })), stats: b.enum({ None: b.unit(), Some: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }) }), metadata: b.vec(b.tuple([b.vec(b.u8()), b.vec(b.u8())])) })), equipped_items: b.vec(b.tuple([b.vec(b.u8()), b.struct({ id: b.vec(b.u8()), name: b.vec(b.u8()), description: b.vec(b.u8()), rarity: b.enum({ Common: b.unit(), Uncommon: b.unit(), Rare: b.unit(), Epic: b.unit(), Legendary: b.unit() }), level_requirement: b.u8(), effects: b.vec(b.enum({ Damage: b.tuple([b.u32()]), Heal: b.struct({ amount: b.u32(), duration: b.u16() }), Status: b.struct({ effect_type: b.vec(b.u8()), power: b.u16(), duration: b.u32() }), None: b.unit() })), stats: b.enum({ None: b.unit(), Some: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }) }), metadata: b.vec(b.tuple([b.vec(b.u8()), b.vec(b.u8())])) })])), achievements: b.vec(b.struct({ id: b.vec(b.u8()), name: b.vec(b.u8()), description: b.vec(b.u8()), reward_points: b.u32(), completed_at: b.enum({ None: b.unit(), Some: b.u64() }), prerequisites: b.vec(b.vec(b.u8())) })), completed_quests: b.vec(b.vec(b.u8())), active_quests: b.vec(b.struct({ quest_id: b.vec(b.u8()), started_at: b.u64(), steps_completed: b.vec(b.u32()), current_step: b.u32(), collected_items: b.vec(b.tuple([b.vec(b.u8()), b.u32()])) })), guild: b.enum({ None: b.unit(), Some: b.struct({ guild_id: b.vec(b.u8()), guild_name: b.vec(b.u8()), joined_at: b.u64(), rank: b.vec(b.u8()), permissions: b.vec(b.vec(b.u8())) }) }), current_trades: b.vec(b.struct({ id: b.vec(b.u8()), from_player: b.vec(b.u8()), to_player: b.vec(b.u8()), items: b.vec(b.struct({ id: b.vec(b.u8()), name: b.vec(b.u8()), description: b.vec(b.u8()), rarity: b.enum({ Common: b.unit(), Uncommon: b.unit(), Rare: b.unit(), Epic: b.unit(), Legendary: b.unit() }), level_requirement: b.u8(), effects: b.vec(b.enum({ Damage: b.tuple([b.u32()]), Heal: b.struct({ amount: b.u32(), duration: b.u16() }), Status: b.struct({ effect_type: b.vec(b.u8()), power: b.u16(), duration: b.u32() }), None: b.unit() })), stats: b.enum({ None: b.unit(), Some: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }) }), metadata: b.vec(b.tuple([b.vec(b.u8()), b.vec(b.u8())])) })), gold_amount: b.u64(), status: b.vec(b.u8()), created_at: b.u64(), completed_at: b.enum({ None: b.unit(), Some: b.u64() }) })), friends: b.vec(b.vec(b.u8())), blocked_players: b.vec(b.vec(b.u8())), settings: b.vec(b.tuple([b.vec(b.u8()), b.vec(b.u8())])), last_deaths: b.vec(b.tuple([b.u64(), b.struct({ lat: b.u64(), lng: b.u64(), altitude: b.enum({ None: b.unit(), Some: b.u32() }) }), b.vec(b.u8())])), skill_levels: b.vec(b.tuple([b.vec(b.u8()), b.tuple([b.u16(), b.u32()])])) });
export type PlayerCharacter = b.infer<typeof PlayerCharacterSchema>;

export const QuestProgressSchema = b.struct({ quest_id: b.vec(b.u8()), started_at: b.u64(), steps_completed: b.vec(b.u32()), current_step: b.u32(), collected_items: b.vec(b.tuple([b.vec(b.u8()), b.u32()])) });
export type QuestProgress = b.infer<typeof QuestProgressSchema>;

export const StatsSchema = b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() });
export type Stats = b.infer<typeof StatsSchema>;

export const TradeSchema = b.struct({ id: b.vec(b.u8()), from_player: b.vec(b.u8()), to_player: b.vec(b.u8()), items: b.vec(b.struct({ id: b.vec(b.u8()), name: b.vec(b.u8()), description: b.vec(b.u8()), rarity: b.enum({ Common: b.unit(), Uncommon: b.unit(), Rare: b.unit(), Epic: b.unit(), Legendary: b.unit() }), level_requirement: b.u8(), effects: b.vec(b.enum({ Damage: b.tuple([b.u32()]), Heal: b.struct({ amount: b.u32(), duration: b.u16() }), Status: b.struct({ effect_type: b.vec(b.u8()), power: b.u16(), duration: b.u32() }), None: b.unit() })), stats: b.enum({ None: b.unit(), Some: b.struct({ strength: b.u16(), dexterity: b.u16(), intelligence: b.u16(), health: b.u32(), mana: b.u32() }) }), metadata: b.vec(b.tuple([b.vec(b.u8()), b.vec(b.u8())])) })), gold_amount: b.u64(), status: b.vec(b.u8()), created_at: b.u64(), completed_at: b.enum({ None: b.unit(), Some: b.u64() }) });
export type Trade = b.infer<typeof TradeSchema>;

