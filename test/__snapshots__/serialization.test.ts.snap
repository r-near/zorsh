// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`complex nested structures > game state example 1`] = `
Uint8Array [
  1,
  0,
  0,
  0,
  7,
  0,
  0,
  0,
  112,
  108,
  97,
  121,
  101,
  114,
  49,
  5,
  0,
  0,
  0,
  65,
  108,
  105,
  99,
  101,
  100,
  2,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  112,
  111,
  116,
  105,
  111,
  110,
  5,
  0,
  5,
  0,
  0,
  0,
  115,
  119,
  111,
  114,
  100,
  1,
  0,
  2,
  0,
  0,
  0,
  10,
  0,
  0,
  0,
  102,
  105,
  114,
  115,
  116,
  95,
  107,
  105,
  108,
  108,
  8,
  0,
  0,
  0,
  115,
  112,
  101,
  101,
  100,
  114,
  117,
  110,
  1,
  8,
  0,
  0,
  0,
  87,
  97,
  114,
  114,
  105,
  111,
  114,
  115,
  3,
  0,
  0,
  0,
  100,
  0,
  95,
  0,
  98,
  0,
  5,
  0,
  0,
  0,
  1,
  210,
  2,
  150,
  73,
]
`;

exports[`complex types > dynamic vec 1`] = `
Uint8Array [
  5,
  0,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
]
`;

exports[`complex types > enum > enum with data - err 1`] = `
Uint8Array [
  1,
  148,
  1,
  9,
  0,
  0,
  0,
  78,
  111,
  116,
  32,
  102,
  111,
  117,
  110,
  100,
]
`;

exports[`complex types > enum > enum with data - ok 1`] = `
Uint8Array [
  0,
  7,
  0,
  0,
  0,
  115,
  117,
  99,
  99,
  101,
  115,
  115,
]
`;

exports[`complex types > enum > simple enum 1`] = `
Uint8Array [
  0,
]
`;

exports[`complex types > fixed array 1`] = `
Uint8Array [
  1,
  0,
  2,
  0,
  3,
  0,
]
`;

exports[`complex types > hashmap 1`] = `
Uint8Array [
  2,
  0,
  0,
  0,
  5,
  0,
  0,
  0,
  97,
  108,
  105,
  99,
  101,
  100,
  0,
  0,
  0,
  3,
  0,
  0,
  0,
  98,
  111,
  98,
  200,
  0,
  0,
  0,
]
`;

exports[`complex types > hashset 1`] = `
Uint8Array [
  3,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  97,
  1,
  0,
  0,
  0,
  98,
  1,
  0,
  0,
  0,
  99,
]
`;

exports[`complex types > option > none value 1`] = `
Uint8Array [
  0,
]
`;

exports[`complex types > option > some value 1`] = `
Uint8Array [
  1,
  5,
  0,
  0,
  0,
  104,
  101,
  108,
  108,
  111,
]
`;

exports[`complex types > struct 1`] = `
Uint8Array [
  5,
  0,
  0,
  0,
  97,
  108,
  105,
  99,
  101,
  25,
  3,
  0,
  0,
  0,
  90,
  0,
  95,
  0,
  100,
  0,
]
`;

exports[`primitive types > numeric type 'f32' 1`] = `
Uint8Array [
  0,
  0,
  128,
  60,
]
`;

exports[`primitive types > numeric type 'f64' 1`] = `
Uint8Array [
  24,
  45,
  68,
  84,
  251,
  33,
  9,
  64,
]
`;

exports[`primitive types > numeric type 'i8' 1`] = `
Uint8Array [
  128,
]
`;

exports[`primitive types > numeric type 'i16' 1`] = `
Uint8Array [
  0,
  128,
]
`;

exports[`primitive types > numeric type 'i32' 1`] = `
Uint8Array [
  0,
  0,
  0,
  128,
]
`;

exports[`primitive types > numeric type 'i64' 1`] = `
Uint8Array [
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  128,
]
`;

exports[`primitive types > numeric type 'i128' 1`] = `
Uint8Array [
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  128,
]
`;

exports[`primitive types > numeric type 'u8' 1`] = `
Uint8Array [
  255,
]
`;

exports[`primitive types > numeric type 'u16' 1`] = `
Uint8Array [
  255,
  255,
]
`;

exports[`primitive types > numeric type 'u32' 1`] = `
Uint8Array [
  255,
  255,
  255,
  255,
]
`;

exports[`primitive types > numeric type 'u64' 1`] = `
Uint8Array [
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
]
`;

exports[`primitive types > numeric type 'u128' 1`] = `
Uint8Array [
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
]
`;

exports[`primitive types > string 1`] = `
Uint8Array [
  18,
  0,
  0,
  0,
  72,
  101,
  108,
  108,
  111,
  44,
  32,
  119,
  111,
  114,
  108,
  100,
  33,
  32,
  240,
  159,
  145,
  139,
]
`;

exports[`primitive types > unit 1`] = `Uint8Array []`;
